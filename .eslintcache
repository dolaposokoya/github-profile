[{"/home/dolexy/Desktop/myprojects/github-profile/src/index.js":"1","/home/dolexy/Desktop/myprojects/github-profile/src/Components/App.js":"2","/home/dolexy/Desktop/myprojects/github-profile/src/Components/User/User.js":"3"},{"size":187,"mtime":1608810862379,"results":"4","hashOfConfig":"5"},{"size":304,"mtime":1608810997346,"results":"6","hashOfConfig":"5"},{"size":2671,"mtime":1608839815775,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1w32rh6",{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"12","messages":"13","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"14"},"/home/dolexy/Desktop/myprojects/github-profile/src/index.js",[],"/home/dolexy/Desktop/myprojects/github-profile/src/Components/App.js",[],"/home/dolexy/Desktop/myprojects/github-profile/src/Components/User/User.js",["15","16"],"import React, { useState } from 'react';\nimport $ from 'jquery';\nimport axios from 'axios'\n\nexport default function User() {\n    console.log('Loaded')\n    const baseUrl = 'https://api.github.com/users';\n    const client_id = '192c6b5772044f48a9ba'\n    const client_secret = '40c2eefc4ffaa2cf7544e3ac83f1939e8d225d66'\n    const [iconType, setIconType] = useState('')\n    const [alertType, setAlertType] = useState('')\n    const [message, setMessage] = useState('')\n    const [result, setResult] = useState()\n\n\n    const getUserRepo = async (event) => {\n        try {\n            let request = event.target.value\n            const response = await axios.get(`${baseUrl}/${request}?client_id=${client_id}&client_secret=${client_secret}`)\n            const data = await response.data\n            if (!data) {\n                setMessage('No Data found');\n                setAlertType('info')\n                setIconType(\"fas fa-info\")\n                setResult('')\n                setTimeout(() => setMessage(''), 5000);\n            }\n            else if (response.status === 200) {\n                setMessage('User found');\n                setAlertType('success')\n                setIconType(\"far fa-check-circle\")\n                setResult(data)\n                setTimeout(() => setMessage(''), 5000);\n                // console.log('Function called', response)\n            }\n        }\n        catch (error) {\n            setMessage('Something went wrong');\n            setAlertType('danger')\n            setIconType(\"fas fa-exclamation-triangle\")\n            setResult('')\n            setTimeout(() => setMessage(''), 5000);\n        }\n    }\n\n    return (\n        <div>\n            <div className=\"alertMessage\">\n                {message && <div className={`message alert alert-${alertType}`} role=\"alert\"> <i className={`${iconType}`}></i> {message}</div>}\n            </div>\n            <div className=\"container-fluid mt-5 search-bar\">\n                <div className=\"input-group\">\n                    <input style={{ padding: '15px 15px 15px 0', width: '70%' }} className=\"search\" placeholder=\"Search for a user\" onKeyUp={(e) => getUserRepo(e)} />\n                </div>\n            </div>\n            <div className=\"container-fluid mt-5 box\">\n                <div>\n                    <h2 className=\"name\">Github Profile {result && <>of {result.name}</>}</h2>\n                </div>\n                {result && <div className=\"user-box\">\n                    <img src={result.avatar_url} />\n                    <h3>Name: {result.name}</h3>\n                    <h3>Repositries: {result.public_repos}</h3>\n                </div>}\n            </div>\n        </div>\n    )\n}\n",{"ruleId":"17","severity":1,"message":"18","line":2,"column":8,"nodeType":"19","messageId":"20","endLine":2,"endColumn":9},{"ruleId":"21","severity":1,"message":"22","line":61,"column":21,"nodeType":"23","endLine":61,"endColumn":52},"no-unused-vars","'$' is defined but never used.","Identifier","unusedVar","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement"]